/****** Object:  ForeignKey [FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules]    Script Date: 04/30/2009 09:40:15 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]'))
ALTER TABLE {databaseOwner}[{objectQualifier}reports_XsltExtensionObjects] DROP CONSTRAINT [FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}reports_AddXsltExtensionObject]    Script Date: 04/30/2009 09:40:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_AddXsltExtensionObject]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}reports_AddXsltExtensionObject]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}reports_ClearXsltExtensionObjects]    Script Date: 04/30/2009 09:40:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}reports_ClearXsltExtensionObjects') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}reports_ClearXsltExtensionObjects
GO
/****** Object:  StoredProcedure {databaseOwner}{objectQualifier}reports_GetXsltExtensionObjects    Script Date: 04/30/2009 09:40:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}reports_GetXsltExtensionObjects') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}reports_GetXsltExtensionObjects]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]    Script Date: 04/30/2009 09:40:15 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]'))
ALTER TABLE {databaseOwner}[{objectQualifier}reports_XsltExtensionObjects] DROP CONSTRAINT [FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]    Script Date: 04/30/2009 09:40:15 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}reports_XsltExtensionObjects](
	[ExtensionObjectId] [int] IDENTITY(1,1) NOT NULL,
	[TabModuleId] [int] NOT NULL,
	[XmlNamespace] [nvarchar](512) NOT NULL,
	[ClrType] [nvarchar](512) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}reports_XsltExtensionObjects] PRIMARY KEY CLUSTERED 
(
	[ExtensionObjectId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}reports_GetXsltExtensionObjects]    Script Date: 04/30/2009 09:40:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_GetXsltExtensionObjects]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		Andrew Nurse
-- Create date: March 29, 2009
-- Description:	Retrieves all Xslt Extension Objects for the given tab module
-- =============================================
CREATE PROCEDURE {databaseOwner}[{objectQualifier}reports_GetXsltExtensionObjects]
	@TabModuleId int
AS
BEGIN
	SELECT * 
	FROM {objectQualifier}reports_XsltExtensionObjects
	WHERE TabModuleId = @TabModuleId
END
' 
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}reports_ClearXsltExtensionObjects]    Script Date: 04/30/2009 09:40:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_ClearXsltExtensionObjects]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		Andrew Nurse
-- Create date: March 29, 2009
-- Description:	Clears all Xslt Extension Objects for the given tab module
-- =============================================
CREATE PROCEDURE {databaseOwner}[{objectQualifier}reports_ClearXsltExtensionObjects]
	@TabModuleId int
AS
BEGIN
	DELETE FROM {objectQualifier}reports_XsltExtensionObjects
	WHERE TabModuleId = @TabModuleId
END
' 
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}reports_AddXsltExtensionObject]    Script Date: 04/30/2009 09:40:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_AddXsltExtensionObject]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		Andrew Nurse
-- Create date: March 29, 2009
-- Description:	Clears all Xslt Extension Objects for the given tab module
-- =============================================
CREATE PROCEDURE {databaseOwner}[{objectQualifier}reports_AddXsltExtensionObject]
	@TabModuleId int,
	@Xmlns nvarchar(512),
	@ClrType nvarchar(512)
AS
BEGIN
	INSERT INTO {objectQualifier}reports_XsltExtensionObjects(TabModuleId, XmlNamespace, ClrType)
										  VALUES(@TabModuleId, @Xmlns, @ClrType)
END
' 
END
GO
/****** Object:  ForeignKey [FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules]    Script Date: 04/30/2009 09:40:15 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]'))
ALTER TABLE {databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules] FOREIGN KEY([TabModuleId])
REFERENCES {databaseOwner}[{objectQualifier}TabModules] ([TabModuleID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}reports_XsltExtensionObjects]'))
ALTER TABLE {databaseOwner}[{objectQualifier}reports_XsltExtensionObjects] CHECK CONSTRAINT [FK_{objectQualifier}reports_XsltExtensionObjects_{objectQualifier}TabModules]
GO
